---
const moonIcon = `<path
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
></path>`;

const sunIcon = `<path
  stroke-linecap="round"
  stroke-linejoin="round"
  stroke-width="2"
  d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
></path>`;
---

<button
  id="theme-toggle"
  type="button"
  class="p-2 rounded-lg hover:bg-light-secondary dark:hover:bg-dark-secondary text-light-accent dark:text-dark-accent transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-light-accent dark:focus:ring-dark-accent"
  aria-label="Toggle theme"
>
  <svg
    class="w-5 h-5 dark:hidden"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    aria-hidden="true"
    set:html={moonIcon}
  />
  <svg
    class="w-5 h-5 hidden dark:block"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    aria-hidden="true"
    set:html={sunIcon}
  />
</button>

<script>
  class ThemeManager {
    private mediaQuery: MediaQueryList;

    constructor() {
      this.mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
      this.initialize();
    }

    private initialize() {
      const theme = this.getTheme();
      this.applyTheme(theme);
      this.setupEventListeners();
    }

    private setupEventListeners() {
      document.querySelectorAll("#theme-toggle").forEach((button) => {
        button.addEventListener("click", (e) => {
          e.stopPropagation();
          this.toggleTheme();
        });
      });

      this.mediaQuery.addEventListener("change", (e) => {
        if (!localStorage.getItem("theme")) {
          this.applyTheme(e.matches ? "dark" : "light");
        }
      });

      document.addEventListener("astro:page-load", () => {
        this.setupEventListeners();
      });
    }

    private getTheme(): "light" | "dark" {
      const savedTheme = localStorage.getItem("theme") as
        | "light"
        | "dark"
        | null;
      return savedTheme || (this.mediaQuery.matches ? "dark" : "light");
    }

    private applyTheme(theme: "light" | "dark") {
      const root = document.documentElement;
      const isDark = theme === "dark";

      root.classList.toggle("dark", isDark);
      localStorage.setItem("theme", theme);

      document.querySelectorAll("#theme-toggle").forEach((button) => {
        button.setAttribute(
          "aria-label",
          `Switch to ${isDark ? "light" : "dark"} theme`
        );
      });

      window.dispatchEvent(
        new CustomEvent("theme-change", { detail: { theme } })
      );
    }

    private toggleTheme() {
      const currentTheme = this.getTheme();
      const newTheme = currentTheme === "dark" ? "light" : "dark";
      this.applyTheme(newTheme);
    }
  }

  document.addEventListener("astro:page-load", () => {
    new ThemeManager();
  });
</script>
