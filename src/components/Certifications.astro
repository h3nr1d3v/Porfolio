---
const certifications = [
  {
    id: 1,
    title: "Programación - Nivel Básico",
    organization: "Universidad Tecnológica de Bolívar",
    date: "2024",
    image: "/images/Tech.png",
    link: "https://wallet.xertify.co/certificates/6914FC52A002",
    skills: ["Python", "HTML", "CSS"],
  },
  {
    id: 2,
    title: "Oracle Next Education F2 T4 Back-end",
    organization: "Oracle + Alura Latam",
    date: "2023",
    image: "/images/OracleNext.png",
    link: "https://app.aluracursos.com/program/certificate/f4bda55f-ac51-49b4-8c62-91267a88d488",
    skills: ["Java", "OOP", "Spring Boot"],
  },
  {
    id: 3,
    title: "Personalización de entorno en Linux",
    organization: "Hack4u.io",
    date: "2023",
    image: "/images/CustomizacionLinux.png",
    link: "https://hack4u.io/check-certificate/",
    skills: ["Linux", "Bash", "Vim"],
  },
];
---

<section id="certifications" class="w-full py-16 max-w-4xl mx-auto px-6">
  <div class="space-y-8">
    <h2
      class="text-3xl md:text-4xl font-bold mb-12 text-left text-light-accent dark:text-dark-accent animate-slide-up flex items-center gap-3"
    >
      <i class="fas fa-certificate" aria-hidden="true"></i>
      Certifications
    </h2>

    <div
      class="relative overflow-hidden"
      style="min-height: 400px;"
      role="region"
      aria-label="Certifications carousel"
    >
      <div
        id="certifications-slider"
        class="flex transition-transform duration-500"
        role="list"
      >
        {
          certifications.map((cert, index) => (
            <div
              class="certification-slide w-full flex-shrink-0 bg-light-secondary dark:bg-dark-secondary rounded-xl overflow-hidden shadow-lg"
              role="listitem"
              aria-label={`Certification ${index + 1} of ${certifications.length}`}
            >
              <div class="flex flex-col md:flex-row h-full">
                <div class="md:w-1/2 p-6 flex flex-col justify-between">
                  <div>
                    <h3 class="text-2xl font-semibold mb-3 text-light-accent dark:text-dark-accent">
                      {cert.title}
                    </h3>
                    <p class="text-base md:text-lg mb-4 text-light-tertiary dark:text-dark-tertiary">
                      {cert.organization} - {cert.date}
                    </p>
                    <div
                      class="flex flex-wrap gap-2 mb-4"
                      role="list"
                      aria-label="Skills"
                    >
                      {cert.skills.map((skill) => (
                        <span
                          class="px-3 py-1 text-sm md:text-base rounded-full bg-light-primary dark:bg-dark-primary text-light-accent dark:text-dark-accent"
                          role="listitem"
                        >
                          {skill}
                        </span>
                      ))}
                    </div>
                  </div>
                  <a
                    href={cert.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="text-light-accent dark:text-dark-accent hover:text-light-tertiary dark:hover:text-dark-tertiary transition-colors flex items-center gap-2 text-lg mt-4 focus:outline-none focus:ring-2 focus:ring-light-accent dark:focus:ring-dark-accent"
                    aria-label={`View certificate for ${cert.title}`}
                  >
                    <i class="fas fa-external-link-alt" aria-hidden="true" />
                    <span>View Certificate</span>
                  </a>
                </div>
                <div class="md:w-1/2 h-[300px] md:h-auto">
                  <img
                    src={cert.image}
                    alt={`${cert.title} Certificate`}
                    class="w-full h-full object-cover"
                    loading={index === 0 ? "eager" : "lazy"}
                    width="600"
                    height="400"
                  />
                </div>
              </div>
            </div>
          ))
        }
      </div>

      <div
        class="absolute bottom-4 left-0 right-0 flex justify-center gap-2"
        role="tablist"
        aria-label="Certification slides"
      >
        {
          certifications.map((_, index) => (
            <button
              class="dot w-3 h-3 rounded-full bg-light-tertiary dark:bg-dark-tertiary hover:bg-light-accent dark:hover:bg-dark-accent transition-colors"
              data-index={index}
              role="tab"
              aria-selected={index === 0 ? "true" : "false"}
              aria-label={`Go to slide ${index + 1}`}
              aria-controls="certifications-slider"
            />
          ))
        }
      </div>
    </div>
  </div>
</section>

<style>
  .certification-slide {
    transform: translateX(0);
    opacity: 1;
    transition: all 0.5s ease;
  }

  #certifications-slider {
    display: flex;
    transition: transform 0.5s ease;
  }

  .dot.active {
    @apply bg-light-accent dark:bg-dark-accent;
  }

  @media (prefers-reduced-motion: reduce) {
    .certification-slide,
    #certifications-slider {
      transition: none;
    }
  }
</style>

<script>
  let currentSlide = 0;
  let isPaused = false;
  let autoplayInterval: NodeJS.Timeout | null = null;
  const slider = document.getElementById(
    "certifications-slider"
  ) as HTMLElement;
  const slides = document.querySelectorAll(".certification-slide");
  const totalSlides = slides.length;

  function updateSlider() {
    if (slider) {
      slider.style.transform = `translateX(-${currentSlide * 100}%)`;
      updateDots();
      updateAriaLabels();
    }
  }

  function updateDots() {
    document.querySelectorAll(".dot").forEach((dot, index) => {
      dot.classList.toggle("active", index === currentSlide);
      dot.setAttribute("aria-selected", (index === currentSlide).toString());
    });
  }

  function updateAriaLabels() {
    slides.forEach((slide, index) => {
      slide.setAttribute("aria-hidden", (index !== currentSlide).toString());
    });
  }

  function nextSlide() {
    if (!isPaused) {
      currentSlide = (currentSlide + 1) % totalSlides;
      updateSlider();
    }
  }

  function goToSlide(index: number) {
    if (index >= 0 && index < totalSlides) {
      currentSlide = index;
      updateSlider();
    }
  }

  function startAutoplay() {
    if (
      !autoplayInterval &&
      !window.matchMedia("(prefers-reduced-motion: reduce)").matches
    ) {
      autoplayInterval = setInterval(nextSlide, 5000);
    }
  }

  function stopAutoplay() {
    if (autoplayInterval) {
      clearInterval(autoplayInterval);
      autoplayInterval = null;
    }
  }

  function togglePause() {
    isPaused = !isPaused;
    if (isPaused) {
      stopAutoplay();
    } else {
      startAutoplay();
    }
  }

  function handleKeyPress(e: KeyboardEvent) {
    switch (e.key) {
      case "ArrowLeft":
        goToSlide((currentSlide - 1 + totalSlides) % totalSlides);
        break;
      case "ArrowRight":
        goToSlide((currentSlide + 1) % totalSlides);
        break;
      case "Home":
        goToSlide(0);
        break;
      case "End":
        goToSlide(totalSlides - 1);
        break;
    }
  }

  document.addEventListener("astro:page-load", () => {
    document.querySelectorAll(".dot").forEach((dot, index) => {
      dot.addEventListener("click", () => {
        goToSlide(index);
      });
    });

    slider?.addEventListener("click", (e) => {
      if (!(e.target as HTMLElement).closest("a")) {
        togglePause();
      }
    });

    slider?.addEventListener("keydown", handleKeyPress);

    // Initialize
    updateAriaLabels();
    startAutoplay();
    updateDots();

    // Pause on hover/focus
    slider?.addEventListener("mouseenter", stopAutoplay);
    slider?.addEventListener("mouseleave", startAutoplay);
    slider?.addEventListener("focus", stopAutoplay);
    slider?.addEventListener("blur", startAutoplay);
  });
</script>
