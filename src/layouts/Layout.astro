---
import { ViewTransitions } from "astro:transitions";
import Navbar from "../components/Navbar.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Henry P's Developer Portfolio" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&family=Noto+Sans+JP:wght@300;400;500;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
      rel="stylesheet"
    />
    <ViewTransitions />
  </head>
  <body
    class="min-h-screen relative text-gray-900 dark:text-gray-100 transition-colors duration-300"
  >
    <div class="fixed inset-0 z-[-2]">
      <!-- Light theme background -->
      <!-- Fondo con cuadrÃ­cula y degradado radial -->
      <div
        class="absolute inset-0 -z-10 h-full w-full bg-white bg-[linear-gradient(to_right,#f0f0f0_1px,transparent_1px),linear-gradient(to_bottom,#f0f0f0_1px,transparent_1px)] bg-[size:6rem_4rem]"
      >
        <!-- Degradado radial en el centro superior -->
        <div
          class="absolute bottom-0 left-0 right-0 top-0 bg-[radial-gradient(circle_500px_at_50%_200px,#C9EBFF,transparent)]"
        >
        </div>
      </div>

      <!-- Dark theme background -->
      <div
        class="absolute top-0 z-[-2] h-screen w-screen bg-neutral-950 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))] hidden dark:block"
      >
      </div>
    </div>
    <Navbar />
    <main class="w-full flex flex-col items-center">
      <div class="max-w-[900px] w-full px-4">
        <slot />
      </div>
    </main>
  </body>
</html>

<style is:global>
  :root {
    --font-primary: "Montserrat", sans-serif;
    --font-secondary: "Noto Sans JP", sans-serif;
  }

  html {
    font-family: var(--font-primary);
    scroll-behavior: smooth;
    font-size: 16px;
  }

  @media (min-width: 768px) {
    html {
      font-size: 18px;
    }
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: var(--font-secondary);
  }

  h1 {
    font-size: 2.5rem;
  }
  h2 {
    font-size: 2rem;
  }
  h3 {
    font-size: 1.75rem;
  }

  p {
    font-size: 1.125rem;
    line-height: 1.7;
    max-width: 70ch;
  }

  section {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.5s ease,
      transform 0.5s ease;
  }

  section.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-slide-up {
    animation: slideUp 0.5s ease-out;
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-slide-in {
    animation: slideIn 0.5s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
</style>

<script>
  function setTheme(theme: "light" | "dark") {
    document.documentElement.classList.toggle("dark", theme === "dark");
    localStorage.setItem("theme", theme);
  }

  // Set initial theme
  const savedTheme = localStorage.getItem("theme") as "light" | "dark" | null;
  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
  setTheme(savedTheme || (prefersDark ? "dark" : "light"));

  // Scroll animation
  const observerOptions = {
    root: null,
    rootMargin: "0px",
    threshold: 0.1,
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("visible");
      } else {
        entry.target.classList.remove("visible");
      }
    });
  }, observerOptions);

  document.addEventListener("astro:page-load", () => {
    document.querySelectorAll("section").forEach((section) => {
      observer.observe(section);
    });

    // Show hero section on initial load
    const heroSection = document.querySelector("section");
    if (heroSection) {
      heroSection.classList.add("visible");
    }
  });
</script>
